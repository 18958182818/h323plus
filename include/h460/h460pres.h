//
// H460pres.h
//
// Code automatically generated by asnparse.
//

#if ! H323_DISABLE_H460P

#ifndef __H460P_H
#define __H460P_H

#ifdef P_USE_PRAGMA
#pragma interface
#endif

#include <ptclib/asner.h>

#include "h225.h"
#include "h235.h"


//
// SubscriptionIdentifier
//

class H460P_SubscriptionIdentifier : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_SubscriptionIdentifier, PASN_Sequence);
#endif
  public:
    H460P_SubscriptionIdentifier(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_OctetString m_guid;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// PresenceState
//

class H460P_PresenceState : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_PresenceState, PASN_Enumeration);
#endif
  public:
    H460P_PresenceState(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_presHidden,
      e_presAvailable,
      e_presOnline,
      e_presOffline,
      e_presOnCall,
      e_presVoiceMail,
      e_presNotAvailable = 8,
      e_presGeneric
    };

    H460P_PresenceState & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ArrayOf_AliasAddress
//

class H225_AliasAddress;

class H460P_ArrayOf_AliasAddress : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_ArrayOf_AliasAddress, PASN_Array);
#endif
  public:
    H460P_ArrayOf_AliasAddress(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H225_AliasAddress & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_ClearToken
//

class H235_ClearToken;

class H460P_ArrayOf_ClearToken : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_ArrayOf_ClearToken, PASN_Array);
#endif
  public:
    H460P_ArrayOf_ClearToken(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H235_ClearToken & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_CryptoH323Token
//

class H225_CryptoH323Token;

class H460P_ArrayOf_CryptoH323Token : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_ArrayOf_CryptoH323Token, PASN_Array);
#endif
  public:
    H460P_ArrayOf_CryptoH323Token(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H225_CryptoH323Token & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_GenericData
//

class H225_GenericData;

class H460P_ArrayOf_GenericData : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_ArrayOf_GenericData, PASN_Array);
#endif
  public:
    H460P_ArrayOf_GenericData(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H225_GenericData & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// PresenceSubscription
//

class H460P_PresenceSubscription : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_PresenceSubscription, PASN_Sequence);
#endif
  public:
    H460P_PresenceSubscription(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_rasAddress,
      e_timeToLive,
      e_identifier,
      e_tokens,
      e_cryptoTokens,
      e_genericData
    };

    PASN_Boolean m_approved;
    H225_AliasAddress m_subscribe;
    H460P_ArrayOf_AliasAddress m_alias;
    H225_TransportAddress m_rasAddress;
    H225_TimeToLive m_timeToLive;
    H460P_SubscriptionIdentifier m_identifier;
    H460P_ArrayOf_ClearToken m_tokens;
    H460P_ArrayOf_CryptoH323Token m_cryptoTokens;
    H460P_ArrayOf_GenericData m_genericData;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// Presentity
//

class H460P_Presentity : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_Presentity, PASN_Sequence);
#endif
  public:
    H460P_Presentity(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_display,
      e_geolocation,
      e_genericData
    };

    H460P_PresenceState m_state;
    PASN_BMPString m_display;
    PASN_OctetString m_geolocation;
    H460P_ArrayOf_GenericData m_genericData;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// PresenceNotification
//

class H460P_PresenceNotification : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H460P_PresenceNotification, PASN_Sequence);
#endif
  public:
    H460P_PresenceNotification(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_subscribers
    };

    H460P_ArrayOf_AliasAddress m_aliasAddress;
    H460P_Presentity m_presentity;
    H460P_ArrayOf_AliasAddress m_subscribers;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


#endif // __H460P_H

#endif // if ! H323_DISABLE_H460P


// End of H460pres.h
